using g4;
using System.Collections.Generic;
using System;

public partial class LRImplicit
{
    public static int VariantIndex;
    
    public static double size_x;
    public static double size_y;
    public static double size_z;
    public static double bias;
    public static double thickness;
    public static double anisotropy;
    public static double direction_x;
    public static double direction_y;
    public static double direction_z;
    public static double seed;

    static double cutoff = 0.05;
    static double sumindex = 0.0;
    static double x00 = 1.0;
    static double y00 = 0.0;
    static double z00 = 0.0;
    static double x01 = -0.737278861734448;
    static double y01 = 0.675407831916803;
    static double z01 = 0.015625;
    static double x02 = 0.0873830259477624;
    static double y02 = -0.995684510412918;
    static double z02 = 0.03125;
    static double x03 = 0.607770042486784;
    static double y03 = 0.792728396003709;
    static double z03 = 0.046875;
    static double x04 = -0.982788334920178;
    static double y04 = -0.173841418381305;
    static double z04 = 0.0625;
    static double x05 = 0.841176416921427;
    static double y05 = -0.535087581607188;
    static double z05 = 0.078125;
    static double x06 = -0.258460947867363;
    static double y06 = 0.961461843198941;
    static double z06 = 0.09375;
    static double x07 = -0.458141839767598;
    static double y07 = -0.882124233897562;
    static double z07 = 0.109375;
    static double x08 = 0.93195395672266;
    static double y08 = 0.340348090267859;
    static double z08 = 0.125;
    static double x09 = -0.915160271516436;
    static double y09 = 0.377764856508599;
    static double z09 = 0.140625;
    static double x10 = 0.418640123283574;
    static double y10 = -0.894609626975428;
    static double z10 = 0.15625;
    static double x11 = 0.294830151415467;
    static double y11 = 0.939964981364377;
    static double z11 = 0.171875;
    static double x12 = -0.84986634532431;
    static double y12 = -0.492514918642168;
    static double z12 = 0.1875;
    static double x13 = 0.956314832717565;
    static double y13 = -0.210243133298989;
    static double z13 = 0.203125;
    static double x14 = -0.561200333405888;
    static double y14 = 0.798249724888847;
    static double z14 = 0.21875;
    static double x15 = -0.124931187022774;
    static double y15 = -0.964085347821489;
    static double z15 = 0.234375;
    static double x16 = 0.740368206273872;
    static double y16 = 0.623983108055667;
    static double z16 = 0.25;
    static double x17 = -0.963253158978878;
    static double y17 = 0.0398335423005854;
    static double z17 = 0.265625;
    static double x18 = 0.680217184183665;
    static double y18 = -0.67690695065219;
    static double z18 = 0.28125;
    static double x19 = -0.0441089669314494;
    static double y19 = 0.953897076948682;
    static double z19 = 0.296875;
    static double x20 = -0.608620995537968;
    static double y20 = -0.729331360761604;
    static double z20 = 0.3125;
    static double x21 = 0.936198173348852;
    static double y21 = 0.125964140108497;
    static double z21 = 0.328125;
    static double x22 = -0.770836215008742;
    static double y22 = 0.536327760917703;
    static double z22 = 0.34375;
    static double x23 = 0.204818528463042;
    static double y23 = -0.910438894035857;
    static double z23 = 0.359375;
    static double x24 = 0.460899006591315;
    static double y24 = 0.804330221813864;
    static double z24 = 0.375;
    static double x25 = -0.877001236114242;
    static double y25 = -0.279787314274774;
    static double z25 = 0.390625;
    static double x26 = 0.829505014414507;
    static double y26 = -0.383252356236969;
    static double z26 = 0.40625;
    static double x27 = -0.350023826268533;
    static double y27 = 0.836364038812846;
    static double z27 = 0.421875;
    static double x28 = -0.304342520820425;
    static double y28 = -0.846149738533712;
    static double z28 = 0.4375;
    static double x29 = 0.789099458755995;
    static double y29 = 0.41472856010407;
    static double z29 = 0.453125;
    static double x30 = -0.85415446232221;
    static double y30 = 0.225152375059771;
    static double z30 = 0.46875;
    static double x31 = 0.473157563353914;
    static double y31 = -0.73586872444478;
    static double z31 = 0.484375;
    static double x32 = 0.146684068184128;
    static double y32 = 0.853512615103581;
    static double z32 = 0.5;
    static double x33 = -0.677417295117537;
    static double y33 = -0.524630029306977;
    static double z33 = 0.515625;
    static double x34 = 0.844322438819331;
    static double y34 = -0.0699503881774634;
    static double z34 = 0.53125;
    static double x35 = -0.568534919508583;
    static double y35 = 0.614569588959923;
    static double z35 = 0.546875;
    static double x36 = 0.0040333463127879;
    static double y36 = -0.826787446758549;
    static double z36 = 0.5625;
    static double x37 = 0.548223500510003;
    static double y37 = 0.604336394621041;
    static double z37 = 0.578125;
    static double x38 = -0.801215893738459;
    static double y38 = -0.0742565089462332;
    static double z38 = 0.59375;
    static double x39 = 0.631577765579318;
    static double y39 = -0.479345006650571;
    static double z39 = 0.609375;
    static double x40 = -0.139719014791155;
    static double y40 = 0.768019268577156;
    static double z40 = 0.625;
    static double x41 = -0.408963281681594;
    static double y41 = -0.649883561579474;
    static double z41 = 0.640625;
    static double x42 = 0.727709819715781;
    static double y42 = 0.199435091669511;
    static double z42 = 0.65625;
    static double x43 = -0.658959109639923;
    static double y43 = 0.338166935399604;
    static double z43 = 0.671875;
    static double x44 = 0.252433903090075;
    static double y44 = -0.680897110120693;
    static double z44 = 0.6875;
    static double x45 = 0.268102312436119;
    static double y45 = 0.658586656744126;
    static double z45 = 0.703125;
    static double x46 = -0.628283550031456;
    static double y46 = -0.297755299297714;
    static double z46 = 0.71875;
    static double x47 = 0.648616383840969;
    static double y47 = -0.199975363452765;
    static double z47 = 0.734375;
    static double x48 = -0.334437752252143;
    static double y48 = 0.570658733279825;
    static double z48 = 0.75;
    static double x49 = -0.135059667853029;
    static double y49 = -0.628949318700982;
    static double z49 = 0.765625;
    static double x50 = 0.508892099323145;
    static double y50 = 0.361493110233767;
    static double z50 = 0.78125;
    static double x51 = -0.599506342913246;
    static double y51 = 0.0747153209307573;
    static double z51 = 0.796875;
    static double x52 = 0.377857654494578;
    static double y52 = -0.443922676757852;
    static double z52 = 0.8125;
    static double x53 = 0.0204280108665217;
    static double y53 = 0.56017111738025;
    static double z53 = 0.828125;
    static double x54 = -0.376742605851096;
    static double y54 = -0.382296934903389;
    static double z54 = 0.84375;
    static double x55 = 0.510678770691681;
    static double y55 = 0.0261113488704418;
    static double z55 = 0.859375;
    static double x56 = -0.373210410486044;
    static double y56 = 0.308365026397026;
    static double z56 = 0.875;
    static double x57 = 0.0628358179376757;
    static double y57 = -0.450376253103006;
    static double z57 = 0.890625;
    static double x58 = 0.239745823774167;
    static double y58 = 0.348185119559762;
    static double z58 = 0.90625;
    static double x59 = -0.377619796674669;
    static double y59 = -0.0868894328119477;
    static double z59 = 0.921875;
    static double x60 = 0.302768756041656;
    static double y60 = -0.171536673527816;
    static double z60 = 0.9375;
    static double x61 = -0.0933688123815995;
    static double y61 = 0.287810700373439;
    static double z61 = 0.953125;
    static double x62 = -0.102933553739096;
    static double y62 = -0.225672596951071;
    static double z62 = 0.96875;
    static double x63 = 0.162099963565786;
    static double y63 = 0.0687710781286062;
    static double z63 = 0.984375;
    static double x64 = 0.0;
    static double y64 = 0.0;
    static double z64 = 1.0;
    static double infimum = -8.0;
    static double supremum = 10.0;

    static Implicit sdot(double ax, double ay, double az, Implicit bx, Implicit by, Implicit bz)
    {
        Implicit _sdot_000 = Multiply(ax, bx);
        Implicit _sdot_001 = Multiply(ay, by);
        Implicit _sdot_002 = Add(_sdot_000, _sdot_001);
        Implicit _sdot_003 = Multiply(az, bz);
        Implicit _sdot_004 = Add(_sdot_002, _sdot_003);
        return _sdot_004;
    }

    static double ssdot(double ax, double ay, double az, double bx, double by, double bz)
    {
        double _ssdot_000 = ax * bx;
        double _ssdot_001 = ay * by;
        double _ssdot_002 = _ssdot_000 + _ssdot_001;
        double _ssdot_003 = az * bz;
        double _ssdot_004 = _ssdot_002 + _ssdot_003;
        return _ssdot_004;
    }

    static double fdot(double ax, double ay, double az, double bx, double by, double bz)
    {
        double _fdot_000 = ax * bx;
        double _fdot_001 = ay * by;
        double _fdot_002 = _fdot_000 + _fdot_001;
        double _fdot_003 = az * bz;
        double _fdot_004 = _fdot_002 + _fdot_003;
        return _fdot_004;
    }

    static double flength(double x, double y, double z)
    {
        double _flength_000 = fdot(x, y, z, x, y, z);
        double _flength_001 = Math.Sqrt(_flength_000);
        return _flength_001;
    }

    public static Implicit baseLattice(Vector3d p)
    {
        double dot00 = ssdot(x00, y00, z00, direction_x, direction_y, direction_z);
        double _unclamped00_000 = Math.Abs(dot00);
        double _unclamped00_001 = 1.0 - anisotropy;
        double _unclamped00_002 = flength(x00, y00, z00);
        double _unclamped00_003 = _unclamped00_001 * _unclamped00_002;
        double unclamped00 = _unclamped00_000 - _unclamped00_003;
        double _weight00_000 = 2.0 * cutoff;
        double _weight00_001 = unclamped00 / _weight00_000;
        double _weight00_002 = _weight00_001 + 0.5;
        double _weight00_003 = Math.Max(0.0, _weight00_002);
        double weight00 = Math.Min(_weight00_003, 1.0);
        double frequency = 2.0 * PI;
        Implicit _x_000 = new Implicit(p.x, new Vector3d(1.0, 0.0, 0.0));
        Implicit _x_001 = Divide(_x_000, size_x);
        double _x_002 = seed * PI;
        Implicit x = Add(_x_001, _x_002);
        Implicit _y_000 = new Implicit(p.y, new Vector3d(0.0, 1.0, 0.0));
        Implicit _y_001 = Divide(_y_000, size_y);
        double _y_002 = seed * SQRT2;
        Implicit y = Add(_y_001, _y_002);
        Implicit _z_000 = new Implicit(p.z, new Vector3d(0.0, 0.0, 1.0));
        Implicit _z_001 = Divide(_z_000, size_z);
        double _z_002 = seed * SQRT3;
        Implicit z = Add(_z_001, _z_002);
        Implicit _phi00_000 = sdot(x00, y00, z00, x, y, z);
        Implicit _phi00_001 = Multiply(frequency, _phi00_000);
        double _phi00_002 = 2.0 * PI;
        double _phi00_003 = _phi00_002 * 0.517171422489657;
        Implicit _phi00_004 = Add(_phi00_001, _phi00_003);
        Implicit phi00 = Cos(_phi00_004);
        Implicit term00 = Multiply(weight00, phi00);
        Implicit sum00 = Add(sumindex, term00);
        double dot01 = ssdot(x01, y01, z01, direction_x, direction_y, direction_z);
        double _unclamped01_000 = Math.Abs(dot01);
        double _unclamped01_001 = 1.0 - anisotropy;
        double _unclamped01_002 = flength(x01, y01, z01);
        double _unclamped01_003 = _unclamped01_001 * _unclamped01_002;
        double unclamped01 = _unclamped01_000 - _unclamped01_003;
        double _weight01_000 = 2.0 * cutoff;
        double _weight01_001 = unclamped01 / _weight01_000;
        double _weight01_002 = _weight01_001 + 0.5;
        double _weight01_003 = Math.Max(0.0, _weight01_002);
        double weight01 = Math.Min(_weight01_003, 1.0);
        Implicit _phi01_000 = sdot(x01, y01, z01, x, y, z);
        Implicit _phi01_001 = Multiply(frequency, _phi01_000);
        double _phi01_002 = 2.0 * PI;
        double _phi01_003 = _phi01_002 * 0.949523965777746;
        Implicit _phi01_004 = Add(_phi01_001, _phi01_003);
        Implicit phi01 = Cos(_phi01_004);
        Implicit term01 = Multiply(weight01, phi01);
        Implicit sum01 = Add(sum00, term01);
        double dot02 = ssdot(x02, y02, z02, direction_x, direction_y, direction_z);
        double _unclamped02_000 = Math.Abs(dot02);
        double _unclamped02_001 = 1.0 - anisotropy;
        double _unclamped02_002 = flength(x02, y02, z02);
        double _unclamped02_003 = _unclamped02_001 * _unclamped02_002;
        double unclamped02 = _unclamped02_000 - _unclamped02_003;
        double _weight02_000 = 2.0 * cutoff;
        double _weight02_001 = unclamped02 / _weight02_000;
        double _weight02_002 = _weight02_001 + 0.5;
        double _weight02_003 = Math.Max(0.0, _weight02_002);
        double weight02 = Math.Min(_weight02_003, 1.0);
        Implicit _phi02_000 = sdot(x02, y02, z02, x, y, z);
        Implicit _phi02_001 = Multiply(frequency, _phi02_000);
        double _phi02_002 = 2.0 * PI;
        double _phi02_003 = _phi02_002 * 0.422932334598835;
        Implicit _phi02_004 = Add(_phi02_001, _phi02_003);
        Implicit phi02 = Cos(_phi02_004);
        Implicit term02 = Multiply(weight02, phi02);
        Implicit sum02 = Add(sum01, term02);
        double dot03 = ssdot(x03, y03, z03, direction_x, direction_y, direction_z);
        double _unclamped03_000 = Math.Abs(dot03);
        double _unclamped03_001 = 1.0 - anisotropy;
        double _unclamped03_002 = flength(x03, y03, z03);
        double _unclamped03_003 = _unclamped03_001 * _unclamped03_002;
        double unclamped03 = _unclamped03_000 - _unclamped03_003;
        double _weight03_000 = 2.0 * cutoff;
        double _weight03_001 = unclamped03 / _weight03_000;
        double _weight03_002 = _weight03_001 + 0.5;
        double _weight03_003 = Math.Max(0.0, _weight03_002);
        double weight03 = Math.Min(_weight03_003, 1.0);
        Implicit _phi03_000 = sdot(x03, y03, z03, x, y, z);
        Implicit _phi03_001 = Multiply(frequency, _phi03_000);
        double _phi03_002 = 2.0 * PI;
        double _phi03_003 = _phi03_002 * 0.545077926373368;
        Implicit _phi03_004 = Add(_phi03_001, _phi03_003);
        Implicit phi03 = Cos(_phi03_004);
        Implicit term03 = Multiply(weight03, phi03);
        Implicit sum03 = Add(sum02, term03);
        double dot04 = ssdot(x04, y04, z04, direction_x, direction_y, direction_z);
        double _unclamped04_000 = Math.Abs(dot04);
        double _unclamped04_001 = 1.0 - anisotropy;
        double _unclamped04_002 = flength(x04, y04, z04);
        double _unclamped04_003 = _unclamped04_001 * _unclamped04_002;
        double unclamped04 = _unclamped04_000 - _unclamped04_003;
        double _weight04_000 = 2.0 * cutoff;
        double _weight04_001 = unclamped04 / _weight04_000;
        double _weight04_002 = _weight04_001 + 0.5;
        double _weight04_003 = Math.Max(0.0, _weight04_002);
        double weight04 = Math.Min(_weight04_003, 1.0);
        Implicit _phi04_000 = sdot(x04, y04, z04, x, y, z);
        Implicit _phi04_001 = Multiply(frequency, _phi04_000);
        double _phi04_002 = 2.0 * PI;
        double _phi04_003 = _phi04_002 * 0.00327997903696742;
        Implicit _phi04_004 = Add(_phi04_001, _phi04_003);
        Implicit phi04 = Cos(_phi04_004);
        Implicit term04 = Multiply(weight04, phi04);
        Implicit sum04 = Add(sum03, term04);
        double dot05 = ssdot(x05, y05, z05, direction_x, direction_y, direction_z);
        double _unclamped05_000 = Math.Abs(dot05);
        double _unclamped05_001 = 1.0 - anisotropy;
        double _unclamped05_002 = flength(x05, y05, z05);
        double _unclamped05_003 = _unclamped05_001 * _unclamped05_002;
        double unclamped05 = _unclamped05_000 - _unclamped05_003;
        double _weight05_000 = 2.0 * cutoff;
        double _weight05_001 = unclamped05 / _weight05_000;
        double _weight05_002 = _weight05_001 + 0.5;
        double _weight05_003 = Math.Max(0.0, _weight05_002);
        double weight05 = Math.Min(_weight05_003, 1.0);
        Implicit _phi05_000 = sdot(x05, y05, z05, x, y, z);
        Implicit _phi05_001 = Multiply(frequency, _phi05_000);
        double _phi05_002 = 2.0 * PI;
        double _phi05_003 = _phi05_002 * 0.105446477895871;
        Implicit _phi05_004 = Add(_phi05_001, _phi05_003);
        Implicit phi05 = Cos(_phi05_004);
        Implicit term05 = Multiply(weight05, phi05);
        Implicit sum05 = Add(sum04, term05);
        double dot06 = ssdot(x06, y06, z06, direction_x, direction_y, direction_z);
        double _unclamped06_000 = Math.Abs(dot06);
        double _unclamped06_001 = 1.0 - anisotropy;
        double _unclamped06_002 = flength(x06, y06, z06);
        double _unclamped06_003 = _unclamped06_001 * _unclamped06_002;
        double unclamped06 = _unclamped06_000 - _unclamped06_003;
        double _weight06_000 = 2.0 * cutoff;
        double _weight06_001 = unclamped06 / _weight06_000;
        double _weight06_002 = _weight06_001 + 0.5;
        double _weight06_003 = Math.Max(0.0, _weight06_002);
        double weight06 = Math.Min(_weight06_003, 1.0);
        Implicit _phi06_000 = sdot(x06, y06, z06, x, y, z);
        Implicit _phi06_001 = Multiply(frequency, _phi06_000);
        double _phi06_002 = 2.0 * PI;
        double _phi06_003 = _phi06_002 * 0.255163408406388;
        Implicit _phi06_004 = Add(_phi06_001, _phi06_003);
        Implicit phi06 = Cos(_phi06_004);
        Implicit term06 = Multiply(weight06, phi06);
        Implicit sum06 = Add(sum05, term06);
        double dot07 = ssdot(x07, y07, z07, direction_x, direction_y, direction_z);
        double _unclamped07_000 = Math.Abs(dot07);
        double _unclamped07_001 = 1.0 - anisotropy;
        double _unclamped07_002 = flength(x07, y07, z07);
        double _unclamped07_003 = _unclamped07_001 * _unclamped07_002;
        double unclamped07 = _unclamped07_000 - _unclamped07_003;
        double _weight07_000 = 2.0 * cutoff;
        double _weight07_001 = unclamped07 / _weight07_000;
        double _weight07_002 = _weight07_001 + 0.5;
        double _weight07_003 = Math.Max(0.0, _weight07_002);
        double weight07 = Math.Min(_weight07_003, 1.0);
        Implicit _phi07_000 = sdot(x07, y07, z07, x, y, z);
        Implicit _phi07_001 = Multiply(frequency, _phi07_000);
        double _phi07_002 = 2.0 * PI;
        double _phi07_003 = _phi07_002 * 0.687884917224804;
        Implicit _phi07_004 = Add(_phi07_001, _phi07_003);
        Implicit phi07 = Cos(_phi07_004);
        Implicit term07 = Multiply(weight07, phi07);
        Implicit sum07 = Add(sum06, term07);
        double dot08 = ssdot(x08, y08, z08, direction_x, direction_y, direction_z);
        double _unclamped08_000 = Math.Abs(dot08);
        double _unclamped08_001 = 1.0 - anisotropy;
        double _unclamped08_002 = flength(x08, y08, z08);
        double _unclamped08_003 = _unclamped08_001 * _unclamped08_002;
        double unclamped08 = _unclamped08_000 - _unclamped08_003;
        double _weight08_000 = 2.0 * cutoff;
        double _weight08_001 = unclamped08 / _weight08_000;
        double _weight08_002 = _weight08_001 + 0.5;
        double _weight08_003 = Math.Max(0.0, _weight08_002);
        double weight08 = Math.Min(_weight08_003, 1.0);
        Implicit _phi08_000 = sdot(x08, y08, z08, x, y, z);
        Implicit _phi08_001 = Multiply(frequency, _phi08_000);
        double _phi08_002 = 2.0 * PI;
        double _phi08_003 = _phi08_002 * 0.976412420336;
        Implicit _phi08_004 = Add(_phi08_001, _phi08_003);
        Implicit phi08 = Cos(_phi08_004);
        Implicit term08 = Multiply(weight08, phi08);
        Implicit sum08 = Add(sum07, term08);
        double dot09 = ssdot(x09, y09, z09, direction_x, direction_y, direction_z);
        double _unclamped09_000 = Math.Abs(dot09);
        double _unclamped09_001 = 1.0 - anisotropy;
        double _unclamped09_002 = flength(x09, y09, z09);
        double _unclamped09_003 = _unclamped09_001 * _unclamped09_002;
        double unclamped09 = _unclamped09_000 - _unclamped09_003;
        double _weight09_000 = 2.0 * cutoff;
        double _weight09_001 = unclamped09 / _weight09_000;
        double _weight09_002 = _weight09_001 + 0.5;
        double _weight09_003 = Math.Max(0.0, _weight09_002);
        double weight09 = Math.Min(_weight09_003, 1.0);
        Implicit _phi09_000 = sdot(x09, y09, z09, x, y, z);
        Implicit _phi09_001 = Multiply(frequency, _phi09_000);
        double _phi09_002 = 2.0 * PI;
        double _phi09_003 = _phi09_002 * 0.622110687627917;
        Implicit _phi09_004 = Add(_phi09_001, _phi09_003);
        Implicit phi09 = Cos(_phi09_004);
        Implicit term09 = Multiply(weight09, phi09);
        Implicit sum09 = Add(sum08, term09);
        double dot10 = ssdot(x10, y10, z10, direction_x, direction_y, direction_z);
        double _unclamped10_000 = Math.Abs(dot10);
        double _unclamped10_001 = 1.0 - anisotropy;
        double _unclamped10_002 = flength(x10, y10, z10);
        double _unclamped10_003 = _unclamped10_001 * _unclamped10_002;
        double unclamped10 = _unclamped10_000 - _unclamped10_003;
        double _weight10_000 = 2.0 * cutoff;
        double _weight10_001 = unclamped10 / _weight10_000;
        double _weight10_002 = _weight10_001 + 0.5;
        double _weight10_003 = Math.Max(0.0, _weight10_002);
        double weight10 = Math.Min(_weight10_003, 1.0);
        Implicit _phi10_000 = sdot(x10, y10, z10, x, y, z);
        Implicit _phi10_001 = Multiply(frequency, _phi10_000);
        double _phi10_002 = 2.0 * PI;
        double _phi10_003 = _phi10_002 * 0.656809690530553;
        Implicit _phi10_004 = Add(_phi10_001, _phi10_003);
        Implicit phi10 = Cos(_phi10_004);
        Implicit term10 = Multiply(weight10, phi10);
        Implicit sum10 = Add(sum09, term10);
        double dot11 = ssdot(x11, y11, z11, direction_x, direction_y, direction_z);
        double _unclamped11_000 = Math.Abs(dot11);
        double _unclamped11_001 = 1.0 - anisotropy;
        double _unclamped11_002 = flength(x11, y11, z11);
        double _unclamped11_003 = _unclamped11_001 * _unclamped11_002;
        double unclamped11 = _unclamped11_000 - _unclamped11_003;
        double _weight11_000 = 2.0 * cutoff;
        double _weight11_001 = unclamped11 / _weight11_000;
        double _weight11_002 = _weight11_001 + 0.5;
        double _weight11_003 = Math.Max(0.0, _weight11_002);
        double weight11 = Math.Min(_weight11_003, 1.0);
        Implicit _phi11_000 = sdot(x11, y11, z11, x, y, z);
        Implicit _phi11_001 = Multiply(frequency, _phi11_000);
        double _phi11_002 = 2.0 * PI;
        double _phi11_003 = _phi11_002 * 0.176322528299505;
        Implicit _phi11_004 = Add(_phi11_001, _phi11_003);
        Implicit phi11 = Cos(_phi11_004);
        Implicit term11 = Multiply(weight11, phi11);
        Implicit sum11 = Add(sum10, term11);
        double dot12 = ssdot(x12, y12, z12, direction_x, direction_y, direction_z);
        double _unclamped12_000 = Math.Abs(dot12);
        double _unclamped12_001 = 1.0 - anisotropy;
        double _unclamped12_002 = flength(x12, y12, z12);
        double _unclamped12_003 = _unclamped12_001 * _unclamped12_002;
        double unclamped12 = _unclamped12_000 - _unclamped12_003;
        double _weight12_000 = 2.0 * cutoff;
        double _weight12_001 = unclamped12 / _weight12_000;
        double _weight12_002 = _weight12_001 + 0.5;
        double _weight12_003 = Math.Max(0.0, _weight12_002);
        double weight12 = Math.Min(_weight12_003, 1.0);
        Implicit _phi12_000 = sdot(x12, y12, z12, x, y, z);
        Implicit _phi12_001 = Multiply(frequency, _phi12_000);
        double _phi12_002 = 2.0 * PI;
        double _phi12_003 = _phi12_002 * 0.112782861561106;
        Implicit _phi12_004 = Add(_phi12_001, _phi12_003);
        Implicit phi12 = Cos(_phi12_004);
        Implicit term12 = Multiply(weight12, phi12);
        Implicit sum12 = Add(sum11, term12);
        double dot13 = ssdot(x13, y13, z13, direction_x, direction_y, direction_z);
        double _unclamped13_000 = Math.Abs(dot13);
        double _unclamped13_001 = 1.0 - anisotropy;
        double _unclamped13_002 = flength(x13, y13, z13);
        double _unclamped13_003 = _unclamped13_001 * _unclamped13_002;
        double unclamped13 = _unclamped13_000 - _unclamped13_003;
        double _weight13_000 = 2.0 * cutoff;
        double _weight13_001 = unclamped13 / _weight13_000;
        double _weight13_002 = _weight13_001 + 0.5;
        double _weight13_003 = Math.Max(0.0, _weight13_002);
        double weight13 = Math.Min(_weight13_003, 1.0);
        Implicit _phi13_000 = sdot(x13, y13, z13, x, y, z);
        Implicit _phi13_001 = Multiply(frequency, _phi13_000);
        double _phi13_002 = 2.0 * PI;
        double _phi13_003 = _phi13_002 * 0.814410968799126;
        Implicit _phi13_004 = Add(_phi13_001, _phi13_003);
        Implicit phi13 = Cos(_phi13_004);
        Implicit term13 = Multiply(weight13, phi13);
        Implicit sum13 = Add(sum12, term13);
        double dot14 = ssdot(x14, y14, z14, direction_x, direction_y, direction_z);
        double _unclamped14_000 = Math.Abs(dot14);
        double _unclamped14_001 = 1.0 - anisotropy;
        double _unclamped14_002 = flength(x14, y14, z14);
        double _unclamped14_003 = _unclamped14_001 * _unclamped14_002;
        double unclamped14 = _unclamped14_000 - _unclamped14_003;
        double _weight14_000 = 2.0 * cutoff;
        double _weight14_001 = unclamped14 / _weight14_000;
        double _weight14_002 = _weight14_001 + 0.5;
        double _weight14_003 = Math.Max(0.0, _weight14_002);
        double weight14 = Math.Min(_weight14_003, 1.0);
        Implicit _phi14_000 = sdot(x14, y14, z14, x, y, z);
        Implicit _phi14_001 = Multiply(frequency, _phi14_000);
        double _phi14_002 = 2.0 * PI;
        double _phi14_003 = _phi14_002 * 0.240043566908953;
        Implicit _phi14_004 = Add(_phi14_001, _phi14_003);
        Implicit phi14 = Cos(_phi14_004);
        Implicit term14 = Multiply(weight14, phi14);
        Implicit sum14 = Add(sum13, term14);
        double dot15 = ssdot(x15, y15, z15, direction_x, direction_y, direction_z);
        double _unclamped15_000 = Math.Abs(dot15);
        double _unclamped15_001 = 1.0 - anisotropy;
        double _unclamped15_002 = flength(x15, y15, z15);
        double _unclamped15_003 = _unclamped15_001 * _unclamped15_002;
        double unclamped15 = _unclamped15_000 - _unclamped15_003;
        double _weight15_000 = 2.0 * cutoff;
        double _weight15_001 = unclamped15 / _weight15_000;
        double _weight15_002 = _weight15_001 + 0.5;
        double _weight15_003 = Math.Max(0.0, _weight15_002);
        double weight15 = Math.Min(_weight15_003, 1.0);
        Implicit _phi15_000 = sdot(x15, y15, z15, x, y, z);
        Implicit _phi15_001 = Multiply(frequency, _phi15_000);
        double _phi15_002 = 2.0 * PI;
        double _phi15_003 = _phi15_002 * 0.125666221912721;
        Implicit _phi15_004 = Add(_phi15_001, _phi15_003);
        Implicit phi15 = Cos(_phi15_004);
        Implicit term15 = Multiply(weight15, phi15);
        Implicit sum15 = Add(sum14, term15);
        double dot16 = ssdot(x16, y16, z16, direction_x, direction_y, direction_z);
        double _unclamped16_000 = Math.Abs(dot16);
        double _unclamped16_001 = 1.0 - anisotropy;
        double _unclamped16_002 = flength(x16, y16, z16);
        double _unclamped16_003 = _unclamped16_001 * _unclamped16_002;
        double unclamped16 = _unclamped16_000 - _unclamped16_003;
        double _weight16_000 = 2.0 * cutoff;
        double _weight16_001 = unclamped16 / _weight16_000;
        double _weight16_002 = _weight16_001 + 0.5;
        double _weight16_003 = Math.Max(0.0, _weight16_002);
        double weight16 = Math.Min(_weight16_003, 1.0);
        Implicit _phi16_000 = sdot(x16, y16, z16, x, y, z);
        Implicit _phi16_001 = Multiply(frequency, _phi16_000);
        double _phi16_002 = 2.0 * PI;
        double _phi16_003 = _phi16_002 * 0.0665183561610731;
        Implicit _phi16_004 = Add(_phi16_001, _phi16_003);
        Implicit phi16 = Cos(_phi16_004);
        Implicit term16 = Multiply(weight16, phi16);
        Implicit sum16 = Add(sum15, term16);
        double dot17 = ssdot(x17, y17, z17, direction_x, direction_y, direction_z);
        double _unclamped17_000 = Math.Abs(dot17);
        double _unclamped17_001 = 1.0 - anisotropy;
        double _unclamped17_002 = flength(x17, y17, z17);
        double _unclamped17_003 = _unclamped17_001 * _unclamped17_002;
        double unclamped17 = _unclamped17_000 - _unclamped17_003;
        double _weight17_000 = 2.0 * cutoff;
        double _weight17_001 = unclamped17 / _weight17_000;
        double _weight17_002 = _weight17_001 + 0.5;
        double _weight17_003 = Math.Max(0.0, _weight17_002);
        double weight17 = Math.Min(_weight17_003, 1.0);
        Implicit _phi17_000 = sdot(x17, y17, z17, x, y, z);
        Implicit _phi17_001 = Multiply(frequency, _phi17_000);
        double _phi17_002 = 2.0 * PI;
        double _phi17_003 = _phi17_002 * 0.875543291669927;
        Implicit _phi17_004 = Add(_phi17_001, _phi17_003);
        Implicit phi17 = Cos(_phi17_004);
        Implicit term17 = Multiply(weight17, phi17);
        Implicit sum17 = Add(sum16, term17);
        double dot18 = ssdot(x18, y18, z18, direction_x, direction_y, direction_z);
        double _unclamped18_000 = Math.Abs(dot18);
        double _unclamped18_001 = 1.0 - anisotropy;
        double _unclamped18_002 = flength(x18, y18, z18);
        double _unclamped18_003 = _unclamped18_001 * _unclamped18_002;
        double unclamped18 = _unclamped18_000 - _unclamped18_003;
        double _weight18_000 = 2.0 * cutoff;
        double _weight18_001 = unclamped18 / _weight18_000;
        double _weight18_002 = _weight18_001 + 0.5;
        double _weight18_003 = Math.Max(0.0, _weight18_002);
        double weight18 = Math.Min(_weight18_003, 1.0);
        Implicit _phi18_000 = sdot(x18, y18, z18, x, y, z);
        Implicit _phi18_001 = Multiply(frequency, _phi18_000);
        double _phi18_002 = 2.0 * PI;
        double _phi18_003 = _phi18_002 * 0.0154281051925675;
        Implicit _phi18_004 = Add(_phi18_001, _phi18_003);
        Implicit phi18 = Cos(_phi18_004);
        Implicit term18 = Multiply(weight18, phi18);
        Implicit sum18 = Add(sum17, term18);
        double dot19 = ssdot(x19, y19, z19, direction_x, direction_y, direction_z);
        double _unclamped19_000 = Math.Abs(dot19);
        double _unclamped19_001 = 1.0 - anisotropy;
        double _unclamped19_002 = flength(x19, y19, z19);
        double _unclamped19_003 = _unclamped19_001 * _unclamped19_002;
        double unclamped19 = _unclamped19_000 - _unclamped19_003;
        double _weight19_000 = 2.0 * cutoff;
        double _weight19_001 = unclamped19 / _weight19_000;
        double _weight19_002 = _weight19_001 + 0.5;
        double _weight19_003 = Math.Max(0.0, _weight19_002);
        double weight19 = Math.Min(_weight19_003, 1.0);
        Implicit _phi19_000 = sdot(x19, y19, z19, x, y, z);
        Implicit _phi19_001 = Multiply(frequency, _phi19_000);
        double _phi19_002 = 2.0 * PI;
        double _phi19_003 = _phi19_002 * 0.446480961055725;
        Implicit _phi19_004 = Add(_phi19_001, _phi19_003);
        Implicit phi19 = Cos(_phi19_004);
        Implicit term19 = Multiply(weight19, phi19);
        Implicit sum19 = Add(sum18, term19);
        double dot20 = ssdot(x20, y20, z20, direction_x, direction_y, direction_z);
        double _unclamped20_000 = Math.Abs(dot20);
        double _unclamped20_001 = 1.0 - anisotropy;
        double _unclamped20_002 = flength(x20, y20, z20);
        double _unclamped20_003 = _unclamped20_001 * _unclamped20_002;
        double unclamped20 = _unclamped20_000 - _unclamped20_003;
        double _weight20_000 = 2.0 * cutoff;
        double _weight20_001 = unclamped20 / _weight20_000;
        double _weight20_002 = _weight20_001 + 0.5;
        double _weight20_003 = Math.Max(0.0, _weight20_002);
        double weight20 = Math.Min(_weight20_003, 1.0);
        Implicit _phi20_000 = sdot(x20, y20, z20, x, y, z);
        Implicit _phi20_001 = Multiply(frequency, _phi20_000);
        double _phi20_002 = 2.0 * PI;
        double _phi20_003 = _phi20_002 * 0.756669236355461;
        Implicit _phi20_004 = Add(_phi20_001, _phi20_003);
        Implicit phi20 = Cos(_phi20_004);
        Implicit term20 = Multiply(weight20, phi20);
        Implicit sum20 = Add(sum19, term20);
        double dot21 = ssdot(x21, y21, z21, direction_x, direction_y, direction_z);
        double _unclamped21_000 = Math.Abs(dot21);
        double _unclamped21_001 = 1.0 - anisotropy;
        double _unclamped21_002 = flength(x21, y21, z21);
        double _unclamped21_003 = _unclamped21_001 * _unclamped21_002;
        double unclamped21 = _unclamped21_000 - _unclamped21_003;
        double _weight21_000 = 2.0 * cutoff;
        double _weight21_001 = unclamped21 / _weight21_000;
        double _weight21_002 = _weight21_001 + 0.5;
        double _weight21_003 = Math.Max(0.0, _weight21_002);
        double weight21 = Math.Min(_weight21_003, 1.0);
        Implicit _phi21_000 = sdot(x21, y21, z21, x, y, z);
        Implicit _phi21_001 = Multiply(frequency, _phi21_000);
        double _phi21_002 = 2.0 * PI;
        double _phi21_003 = _phi21_002 * 0.946748714545554;
        Implicit _phi21_004 = Add(_phi21_001, _phi21_003);
        Implicit phi21 = Cos(_phi21_004);
        Implicit term21 = Multiply(weight21, phi21);
        Implicit sum21 = Add(sum20, term21);
        double dot22 = ssdot(x22, y22, z22, direction_x, direction_y, direction_z);
        double _unclamped22_000 = Math.Abs(dot22);
        double _unclamped22_001 = 1.0 - anisotropy;
        double _unclamped22_002 = flength(x22, y22, z22);
        double _unclamped22_003 = _unclamped22_001 * _unclamped22_002;
        double unclamped22 = _unclamped22_000 - _unclamped22_003;
        double _weight22_000 = 2.0 * cutoff;
        double _weight22_001 = unclamped22 / _weight22_000;
        double _weight22_002 = _weight22_001 + 0.5;
        double _weight22_003 = Math.Max(0.0, _weight22_002);
        double weight22 = Math.Min(_weight22_003, 1.0);
        Implicit _phi22_000 = sdot(x22, y22, z22, x, y, z);
        Implicit _phi22_001 = Multiply(frequency, _phi22_000);
        double _phi22_002 = 2.0 * PI;
        double _phi22_003 = _phi22_002 * 0.945643811622685;
        Implicit _phi22_004 = Add(_phi22_001, _phi22_003);
        Implicit phi22 = Cos(_phi22_004);
        Implicit term22 = Multiply(weight22, phi22);
        Implicit sum22 = Add(sum21, term22);
        double dot23 = ssdot(x23, y23, z23, direction_x, direction_y, direction_z);
        double _unclamped23_000 = Math.Abs(dot23);
        double _unclamped23_001 = 1.0 - anisotropy;
        double _unclamped23_002 = flength(x23, y23, z23);
        double _unclamped23_003 = _unclamped23_001 * _unclamped23_002;
        double unclamped23 = _unclamped23_000 - _unclamped23_003;
        double _weight23_000 = 2.0 * cutoff;
        double _weight23_001 = unclamped23 / _weight23_000;
        double _weight23_002 = _weight23_001 + 0.5;
        double _weight23_003 = Math.Max(0.0, _weight23_002);
        double weight23 = Math.Min(_weight23_003, 1.0);
        Implicit _phi23_000 = sdot(x23, y23, z23, x, y, z);
        Implicit _phi23_001 = Multiply(frequency, _phi23_000);
        double _phi23_002 = 2.0 * PI;
        double _phi23_003 = _phi23_002 * 0.713784601099334;
        Implicit _phi23_004 = Add(_phi23_001, _phi23_003);
        Implicit phi23 = Cos(_phi23_004);
        Implicit term23 = Multiply(weight23, phi23);
        Implicit sum23 = Add(sum22, term23);
        double dot24 = ssdot(x24, y24, z24, direction_x, direction_y, direction_z);
        double _unclamped24_000 = Math.Abs(dot24);
        double _unclamped24_001 = 1.0 - anisotropy;
        double _unclamped24_002 = flength(x24, y24, z24);
        double _unclamped24_003 = _unclamped24_001 * _unclamped24_002;
        double unclamped24 = _unclamped24_000 - _unclamped24_003;
        double _weight24_000 = 2.0 * cutoff;
        double _weight24_001 = unclamped24 / _weight24_000;
        double _weight24_002 = _weight24_001 + 0.5;
        double _weight24_003 = Math.Max(0.0, _weight24_002);
        double weight24 = Math.Min(_weight24_003, 1.0);
        Implicit _phi24_000 = sdot(x24, y24, z24, x, y, z);
        Implicit _phi24_001 = Multiply(frequency, _phi24_000);
        double _phi24_002 = 2.0 * PI;
        double _phi24_003 = _phi24_002 * 0.374915588687664;
        Implicit _phi24_004 = Add(_phi24_001, _phi24_003);
        Implicit phi24 = Cos(_phi24_004);
        Implicit term24 = Multiply(weight24, phi24);
        Implicit sum24 = Add(sum23, term24);
        double dot25 = ssdot(x25, y25, z25, direction_x, direction_y, direction_z);
        double _unclamped25_000 = Math.Abs(dot25);
        double _unclamped25_001 = 1.0 - anisotropy;
        double _unclamped25_002 = flength(x25, y25, z25);
        double _unclamped25_003 = _unclamped25_001 * _unclamped25_002;
        double unclamped25 = _unclamped25_000 - _unclamped25_003;
        double _weight25_000 = 2.0 * cutoff;
        double _weight25_001 = unclamped25 / _weight25_000;
        double _weight25_002 = _weight25_001 + 0.5;
        double _weight25_003 = Math.Max(0.0, _weight25_002);
        double weight25 = Math.Min(_weight25_003, 1.0);
        Implicit _phi25_000 = sdot(x25, y25, z25, x, y, z);
        Implicit _phi25_001 = Multiply(frequency, _phi25_000);
        double _phi25_002 = 2.0 * PI;
        double _phi25_003 = _phi25_002 * 0.843094023266686;
        Implicit _phi25_004 = Add(_phi25_001, _phi25_003);
        Implicit phi25 = Cos(_phi25_004);
        Implicit term25 = Multiply(weight25, phi25);
        Implicit sum25 = Add(sum24, term25);
        double dot26 = ssdot(x26, y26, z26, direction_x, direction_y, direction_z);
        double _unclamped26_000 = Math.Abs(dot26);
        double _unclamped26_001 = 1.0 - anisotropy;
        double _unclamped26_002 = flength(x26, y26, z26);
        double _unclamped26_003 = _unclamped26_001 * _unclamped26_002;
        double unclamped26 = _unclamped26_000 - _unclamped26_003;
        double _weight26_000 = 2.0 * cutoff;
        double _weight26_001 = unclamped26 / _weight26_000;
        double _weight26_002 = _weight26_001 + 0.5;
        double _weight26_003 = Math.Max(0.0, _weight26_002);
        double weight26 = Math.Min(_weight26_003, 1.0);
        Implicit _phi26_000 = sdot(x26, y26, z26, x, y, z);
        Implicit _phi26_001 = Multiply(frequency, _phi26_000);
        double _phi26_002 = 2.0 * PI;
        double _phi26_003 = _phi26_002 * 0.838701460818561;
        Implicit _phi26_004 = Add(_phi26_001, _phi26_003);
        Implicit phi26 = Cos(_phi26_004);
        Implicit term26 = Multiply(weight26, phi26);
        Implicit sum26 = Add(sum25, term26);
        double dot27 = ssdot(x27, y27, z27, direction_x, direction_y, direction_z);
        double _unclamped27_000 = Math.Abs(dot27);
        double _unclamped27_001 = 1.0 - anisotropy;
        double _unclamped27_002 = flength(x27, y27, z27);
        double _unclamped27_003 = _unclamped27_001 * _unclamped27_002;
        double unclamped27 = _unclamped27_000 - _unclamped27_003;
        double _weight27_000 = 2.0 * cutoff;
        double _weight27_001 = unclamped27 / _weight27_000;
        double _weight27_002 = _weight27_001 + 0.5;
        double _weight27_003 = Math.Max(0.0, _weight27_002);
        double weight27 = Math.Min(_weight27_003, 1.0);
        Implicit _phi27_000 = sdot(x27, y27, z27, x, y, z);
        Implicit _phi27_001 = Multiply(frequency, _phi27_000);
        double _phi27_002 = 2.0 * PI;
        double _phi27_003 = _phi27_002 * 0.766726495220208;
        Implicit _phi27_004 = Add(_phi27_001, _phi27_003);
        Implicit phi27 = Cos(_phi27_004);
        Implicit term27 = Multiply(weight27, phi27);
        Implicit sum27 = Add(sum26, term27);
        double dot28 = ssdot(x28, y28, z28, direction_x, direction_y, direction_z);
        double _unclamped28_000 = Math.Abs(dot28);
        double _unclamped28_001 = 1.0 - anisotropy;
        double _unclamped28_002 = flength(x28, y28, z28);
        double _unclamped28_003 = _unclamped28_001 * _unclamped28_002;
        double unclamped28 = _unclamped28_000 - _unclamped28_003;
        double _weight28_000 = 2.0 * cutoff;
        double _weight28_001 = unclamped28 / _weight28_000;
        double _weight28_002 = _weight28_001 + 0.5;
        double _weight28_003 = Math.Max(0.0, _weight28_002);
        double weight28 = Math.Min(_weight28_003, 1.0);
        Implicit _phi28_000 = sdot(x28, y28, z28, x, y, z);
        Implicit _phi28_001 = Multiply(frequency, _phi28_000);
        double _phi28_002 = 2.0 * PI;
        double _phi28_003 = _phi28_002 * 0.21702843049241;
        Implicit _phi28_004 = Add(_phi28_001, _phi28_003);
        Implicit phi28 = Cos(_phi28_004);
        Implicit term28 = Multiply(weight28, phi28);
        Implicit sum28 = Add(sum27, term28);
        double dot29 = ssdot(x29, y29, z29, direction_x, direction_y, direction_z);
        double _unclamped29_000 = Math.Abs(dot29);
        double _unclamped29_001 = 1.0 - anisotropy;
        double _unclamped29_002 = flength(x29, y29, z29);
        double _unclamped29_003 = _unclamped29_001 * _unclamped29_002;
        double unclamped29 = _unclamped29_000 - _unclamped29_003;
        double _weight29_000 = 2.0 * cutoff;
        double _weight29_001 = unclamped29 / _weight29_000;
        double _weight29_002 = _weight29_001 + 0.5;
        double _weight29_003 = Math.Max(0.0, _weight29_002);
        double weight29 = Math.Min(_weight29_003, 1.0);
        Implicit _phi29_000 = sdot(x29, y29, z29, x, y, z);
        Implicit _phi29_001 = Multiply(frequency, _phi29_000);
        double _phi29_002 = 2.0 * PI;
        double _phi29_003 = _phi29_002 * 0.0844903407664553;
        Implicit _phi29_004 = Add(_phi29_001, _phi29_003);
        Implicit phi29 = Cos(_phi29_004);
        Implicit term29 = Multiply(weight29, phi29);
        Implicit sum29 = Add(sum28, term29);
        double dot30 = ssdot(x30, y30, z30, direction_x, direction_y, direction_z);
        double _unclamped30_000 = Math.Abs(dot30);
        double _unclamped30_001 = 1.0 - anisotropy;
        double _unclamped30_002 = flength(x30, y30, z30);
        double _unclamped30_003 = _unclamped30_001 * _unclamped30_002;
        double unclamped30 = _unclamped30_000 - _unclamped30_003;
        double _weight30_000 = 2.0 * cutoff;
        double _weight30_001 = unclamped30 / _weight30_000;
        double _weight30_002 = _weight30_001 + 0.5;
        double _weight30_003 = Math.Max(0.0, _weight30_002);
        double weight30 = Math.Min(_weight30_003, 1.0);
        Implicit _phi30_000 = sdot(x30, y30, z30, x, y, z);
        Implicit _phi30_001 = Multiply(frequency, _phi30_000);
        double _phi30_002 = 2.0 * PI;
        double _phi30_003 = _phi30_002 * 0.699812227279909;
        Implicit _phi30_004 = Add(_phi30_001, _phi30_003);
        Implicit phi30 = Cos(_phi30_004);
        Implicit term30 = Multiply(weight30, phi30);
        Implicit sum30 = Add(sum29, term30);
        double dot31 = ssdot(x31, y31, z31, direction_x, direction_y, direction_z);
        double _unclamped31_000 = Math.Abs(dot31);
        double _unclamped31_001 = 1.0 - anisotropy;
        double _unclamped31_002 = flength(x31, y31, z31);
        double _unclamped31_003 = _unclamped31_001 * _unclamped31_002;
        double unclamped31 = _unclamped31_000 - _unclamped31_003;
        double _weight31_000 = 2.0 * cutoff;
        double _weight31_001 = unclamped31 / _weight31_000;
        double _weight31_002 = _weight31_001 + 0.5;
        double _weight31_003 = Math.Max(0.0, _weight31_002);
        double weight31 = Math.Min(_weight31_003, 1.0);
        Implicit _phi31_000 = sdot(x31, y31, z31, x, y, z);
        Implicit _phi31_001 = Multiply(frequency, _phi31_000);
        double _phi31_002 = 2.0 * PI;
        double _phi31_003 = _phi31_002 * 0.629876956313685;
        Implicit _phi31_004 = Add(_phi31_001, _phi31_003);
        Implicit phi31 = Cos(_phi31_004);
        Implicit term31 = Multiply(weight31, phi31);
        Implicit sum31 = Add(sum30, term31);
        double dot32 = ssdot(x32, y32, z32, direction_x, direction_y, direction_z);
        double _unclamped32_000 = Math.Abs(dot32);
        double _unclamped32_001 = 1.0 - anisotropy;
        double _unclamped32_002 = flength(x32, y32, z32);
        double _unclamped32_003 = _unclamped32_001 * _unclamped32_002;
        double unclamped32 = _unclamped32_000 - _unclamped32_003;
        double _weight32_000 = 2.0 * cutoff;
        double _weight32_001 = unclamped32 / _weight32_000;
        double _weight32_002 = _weight32_001 + 0.5;
        double _weight32_003 = Math.Max(0.0, _weight32_002);
        double weight32 = Math.Min(_weight32_003, 1.0);
        Implicit _phi32_000 = sdot(x32, y32, z32, x, y, z);
        Implicit _phi32_001 = Multiply(frequency, _phi32_000);
        double _phi32_002 = 2.0 * PI;
        double _phi32_003 = _phi32_002 * 0.606181822216813;
        Implicit _phi32_004 = Add(_phi32_001, _phi32_003);
        Implicit phi32 = Cos(_phi32_004);
        Implicit term32 = Multiply(weight32, phi32);
        Implicit sum32 = Add(sum31, term32);
        double dot33 = ssdot(x33, y33, z33, direction_x, direction_y, direction_z);
        double _unclamped33_000 = Math.Abs(dot33);
        double _unclamped33_001 = 1.0 - anisotropy;
        double _unclamped33_002 = flength(x33, y33, z33);
        double _unclamped33_003 = _unclamped33_001 * _unclamped33_002;
        double unclamped33 = _unclamped33_000 - _unclamped33_003;
        double _weight33_000 = 2.0 * cutoff;
        double _weight33_001 = unclamped33 / _weight33_000;
        double _weight33_002 = _weight33_001 + 0.5;
        double _weight33_003 = Math.Max(0.0, _weight33_002);
        double weight33 = Math.Min(_weight33_003, 1.0);
        Implicit _phi33_000 = sdot(x33, y33, z33, x, y, z);
        Implicit _phi33_001 = Multiply(frequency, _phi33_000);
        double _phi33_002 = 2.0 * PI;
        double _phi33_003 = _phi33_002 * 0.710251404019411;
        Implicit _phi33_004 = Add(_phi33_001, _phi33_003);
        Implicit phi33 = Cos(_phi33_004);
        Implicit term33 = Multiply(weight33, phi33);
        Implicit sum33 = Add(sum32, term33);
        double dot34 = ssdot(x34, y34, z34, direction_x, direction_y, direction_z);
        double _unclamped34_000 = Math.Abs(dot34);
        double _unclamped34_001 = 1.0 - anisotropy;
        double _unclamped34_002 = flength(x34, y34, z34);
        double _unclamped34_003 = _unclamped34_001 * _unclamped34_002;
        double unclamped34 = _unclamped34_000 - _unclamped34_003;
        double _weight34_000 = 2.0 * cutoff;
        double _weight34_001 = unclamped34 / _weight34_000;
        double _weight34_002 = _weight34_001 + 0.5;
        double _weight34_003 = Math.Max(0.0, _weight34_002);
        double weight34 = Math.Min(_weight34_003, 1.0);
        Implicit _phi34_000 = sdot(x34, y34, z34, x, y, z);
        Implicit _phi34_001 = Multiply(frequency, _phi34_000);
        double _phi34_002 = 2.0 * PI;
        double _phi34_003 = _phi34_002 * 0.216750112889226;
        Implicit _phi34_004 = Add(_phi34_001, _phi34_003);
        Implicit phi34 = Cos(_phi34_004);
        Implicit term34 = Multiply(weight34, phi34);
        Implicit sum34 = Add(sum33, term34);
        double dot35 = ssdot(x35, y35, z35, direction_x, direction_y, direction_z);
        double _unclamped35_000 = Math.Abs(dot35);
        double _unclamped35_001 = 1.0 - anisotropy;
        double _unclamped35_002 = flength(x35, y35, z35);
        double _unclamped35_003 = _unclamped35_001 * _unclamped35_002;
        double unclamped35 = _unclamped35_000 - _unclamped35_003;
        double _weight35_000 = 2.0 * cutoff;
        double _weight35_001 = unclamped35 / _weight35_000;
        double _weight35_002 = _weight35_001 + 0.5;
        double _weight35_003 = Math.Max(0.0, _weight35_002);
        double weight35 = Math.Min(_weight35_003, 1.0);
        Implicit _phi35_000 = sdot(x35, y35, z35, x, y, z);
        Implicit _phi35_001 = Multiply(frequency, _phi35_000);
        double _phi35_002 = 2.0 * PI;
        double _phi35_003 = _phi35_002 * 0.191948254408411;
        Implicit _phi35_004 = Add(_phi35_001, _phi35_003);
        Implicit phi35 = Cos(_phi35_004);
        Implicit term35 = Multiply(weight35, phi35);
        Implicit sum35 = Add(sum34, term35);
        double dot36 = ssdot(x36, y36, z36, direction_x, direction_y, direction_z);
        double _unclamped36_000 = Math.Abs(dot36);
        double _unclamped36_001 = 1.0 - anisotropy;
        double _unclamped36_002 = flength(x36, y36, z36);
        double _unclamped36_003 = _unclamped36_001 * _unclamped36_002;
        double unclamped36 = _unclamped36_000 - _unclamped36_003;
        double _weight36_000 = 2.0 * cutoff;
        double _weight36_001 = unclamped36 / _weight36_000;
        double _weight36_002 = _weight36_001 + 0.5;
        double _weight36_003 = Math.Max(0.0, _weight36_002);
        double weight36 = Math.Min(_weight36_003, 1.0);
        Implicit _phi36_000 = sdot(x36, y36, z36, x, y, z);
        Implicit _phi36_001 = Multiply(frequency, _phi36_000);
        double _phi36_002 = 2.0 * PI;
        double _phi36_003 = _phi36_002 * 0.372502299261769;
        Implicit _phi36_004 = Add(_phi36_001, _phi36_003);
        Implicit phi36 = Cos(_phi36_004);
        Implicit term36 = Multiply(weight36, phi36);
        Implicit sum36 = Add(sum35, term36);
        double dot37 = ssdot(x37, y37, z37, direction_x, direction_y, direction_z);
        double _unclamped37_000 = Math.Abs(dot37);
        double _unclamped37_001 = 1.0 - anisotropy;
        double _unclamped37_002 = flength(x37, y37, z37);
        double _unclamped37_003 = _unclamped37_001 * _unclamped37_002;
        double unclamped37 = _unclamped37_000 - _unclamped37_003;
        double _weight37_000 = 2.0 * cutoff;
        double _weight37_001 = unclamped37 / _weight37_000;
        double _weight37_002 = _weight37_001 + 0.5;
        double _weight37_003 = Math.Max(0.0, _weight37_002);
        double weight37 = Math.Min(_weight37_003, 1.0);
        Implicit _phi37_000 = sdot(x37, y37, z37, x, y, z);
        Implicit _phi37_001 = Multiply(frequency, _phi37_000);
        double _phi37_002 = 2.0 * PI;
        double _phi37_003 = _phi37_002 * 0.465845178411995;
        Implicit _phi37_004 = Add(_phi37_001, _phi37_003);
        Implicit phi37 = Cos(_phi37_004);
        Implicit term37 = Multiply(weight37, phi37);
        Implicit sum37 = Add(sum36, term37);
        double dot38 = ssdot(x38, y38, z38, direction_x, direction_y, direction_z);
        double _unclamped38_000 = Math.Abs(dot38);
        double _unclamped38_001 = 1.0 - anisotropy;
        double _unclamped38_002 = flength(x38, y38, z38);
        double _unclamped38_003 = _unclamped38_001 * _unclamped38_002;
        double unclamped38 = _unclamped38_000 - _unclamped38_003;
        double _weight38_000 = 2.0 * cutoff;
        double _weight38_001 = unclamped38 / _weight38_000;
        double _weight38_002 = _weight38_001 + 0.5;
        double _weight38_003 = Math.Max(0.0, _weight38_002);
        double weight38 = Math.Min(_weight38_003, 1.0);
        Implicit _phi38_000 = sdot(x38, y38, z38, x, y, z);
        Implicit _phi38_001 = Multiply(frequency, _phi38_000);
        double _phi38_002 = 2.0 * PI;
        double _phi38_003 = _phi38_002 * 0.140456382457124;
        Implicit _phi38_004 = Add(_phi38_001, _phi38_003);
        Implicit phi38 = Cos(_phi38_004);
        Implicit term38 = Multiply(weight38, phi38);
        Implicit sum38 = Add(sum37, term38);
        double dot39 = ssdot(x39, y39, z39, direction_x, direction_y, direction_z);
        double _unclamped39_000 = Math.Abs(dot39);
        double _unclamped39_001 = 1.0 - anisotropy;
        double _unclamped39_002 = flength(x39, y39, z39);
        double _unclamped39_003 = _unclamped39_001 * _unclamped39_002;
        double unclamped39 = _unclamped39_000 - _unclamped39_003;
        double _weight39_000 = 2.0 * cutoff;
        double _weight39_001 = unclamped39 / _weight39_000;
        double _weight39_002 = _weight39_001 + 0.5;
        double _weight39_003 = Math.Max(0.0, _weight39_002);
        double weight39 = Math.Min(_weight39_003, 1.0);
        Implicit _phi39_000 = sdot(x39, y39, z39, x, y, z);
        Implicit _phi39_001 = Multiply(frequency, _phi39_000);
        double _phi39_002 = 2.0 * PI;
        double _phi39_003 = _phi39_002 * 0.703746085828618;
        Implicit _phi39_004 = Add(_phi39_001, _phi39_003);
        Implicit phi39 = Cos(_phi39_004);
        Implicit term39 = Multiply(weight39, phi39);
        Implicit sum39 = Add(sum38, term39);
        double dot40 = ssdot(x40, y40, z40, direction_x, direction_y, direction_z);
        double _unclamped40_000 = Math.Abs(dot40);
        double _unclamped40_001 = 1.0 - anisotropy;
        double _unclamped40_002 = flength(x40, y40, z40);
        double _unclamped40_003 = _unclamped40_001 * _unclamped40_002;
        double unclamped40 = _unclamped40_000 - _unclamped40_003;
        double _weight40_000 = 2.0 * cutoff;
        double _weight40_001 = unclamped40 / _weight40_000;
        double _weight40_002 = _weight40_001 + 0.5;
        double _weight40_003 = Math.Max(0.0, _weight40_002);
        double weight40 = Math.Min(_weight40_003, 1.0);
        Implicit _phi40_000 = sdot(x40, y40, z40, x, y, z);
        Implicit _phi40_001 = Multiply(frequency, _phi40_000);
        double _phi40_002 = 2.0 * PI;
        double _phi40_003 = _phi40_002 * 0.580780656774538;
        Implicit _phi40_004 = Add(_phi40_001, _phi40_003);
        Implicit phi40 = Cos(_phi40_004);
        Implicit term40 = Multiply(weight40, phi40);
        Implicit sum40 = Add(sum39, term40);
        double dot41 = ssdot(x41, y41, z41, direction_x, direction_y, direction_z);
        double _unclamped41_000 = Math.Abs(dot41);
        double _unclamped41_001 = 1.0 - anisotropy;
        double _unclamped41_002 = flength(x41, y41, z41);
        double _unclamped41_003 = _unclamped41_001 * _unclamped41_002;
        double unclamped41 = _unclamped41_000 - _unclamped41_003;
        double _weight41_000 = 2.0 * cutoff;
        double _weight41_001 = unclamped41 / _weight41_000;
        double _weight41_002 = _weight41_001 + 0.5;
        double _weight41_003 = Math.Max(0.0, _weight41_002);
        double weight41 = Math.Min(_weight41_003, 1.0);
        Implicit _phi41_000 = sdot(x41, y41, z41, x, y, z);
        Implicit _phi41_001 = Multiply(frequency, _phi41_000);
        double _phi41_002 = 2.0 * PI;
        double _phi41_003 = _phi41_002 * 0.342093970308574;
        Implicit _phi41_004 = Add(_phi41_001, _phi41_003);
        Implicit phi41 = Cos(_phi41_004);
        Implicit term41 = Multiply(weight41, phi41);
        Implicit sum41 = Add(sum40, term41);
        double dot42 = ssdot(x42, y42, z42, direction_x, direction_y, direction_z);
        double _unclamped42_000 = Math.Abs(dot42);
        double _unclamped42_001 = 1.0 - anisotropy;
        double _unclamped42_002 = flength(x42, y42, z42);
        double _unclamped42_003 = _unclamped42_001 * _unclamped42_002;
        double unclamped42 = _unclamped42_000 - _unclamped42_003;
        double _weight42_000 = 2.0 * cutoff;
        double _weight42_001 = unclamped42 / _weight42_000;
        double _weight42_002 = _weight42_001 + 0.5;
        double _weight42_003 = Math.Max(0.0, _weight42_002);
        double weight42 = Math.Min(_weight42_003, 1.0);
        Implicit _phi42_000 = sdot(x42, y42, z42, x, y, z);
        Implicit _phi42_001 = Multiply(frequency, _phi42_000);
        double _phi42_002 = 2.0 * PI;
        double _phi42_003 = _phi42_002 * 0.940798871093146;
        Implicit _phi42_004 = Add(_phi42_001, _phi42_003);
        Implicit phi42 = Cos(_phi42_004);
        Implicit term42 = Multiply(weight42, phi42);
        Implicit sum42 = Add(sum41, term42);
        double dot43 = ssdot(x43, y43, z43, direction_x, direction_y, direction_z);
        double _unclamped43_000 = Math.Abs(dot43);
        double _unclamped43_001 = 1.0 - anisotropy;
        double _unclamped43_002 = flength(x43, y43, z43);
        double _unclamped43_003 = _unclamped43_001 * _unclamped43_002;
        double unclamped43 = _unclamped43_000 - _unclamped43_003;
        double _weight43_000 = 2.0 * cutoff;
        double _weight43_001 = unclamped43 / _weight43_000;
        double _weight43_002 = _weight43_001 + 0.5;
        double _weight43_003 = Math.Max(0.0, _weight43_002);
        double weight43 = Math.Min(_weight43_003, 1.0);
        Implicit _phi43_000 = sdot(x43, y43, z43, x, y, z);
        Implicit _phi43_001 = Multiply(frequency, _phi43_000);
        double _phi43_002 = 2.0 * PI;
        double _phi43_003 = _phi43_002 * 0.564375521060305;
        Implicit _phi43_004 = Add(_phi43_001, _phi43_003);
        Implicit phi43 = Cos(_phi43_004);
        Implicit term43 = Multiply(weight43, phi43);
        Implicit sum43 = Add(sum42, term43);
        double dot44 = ssdot(x44, y44, z44, direction_x, direction_y, direction_z);
        double _unclamped44_000 = Math.Abs(dot44);
        double _unclamped44_001 = 1.0 - anisotropy;
        double _unclamped44_002 = flength(x44, y44, z44);
        double _unclamped44_003 = _unclamped44_001 * _unclamped44_002;
        double unclamped44 = _unclamped44_000 - _unclamped44_003;
        double _weight44_000 = 2.0 * cutoff;
        double _weight44_001 = unclamped44 / _weight44_000;
        double _weight44_002 = _weight44_001 + 0.5;
        double _weight44_003 = Math.Max(0.0, _weight44_002);
        double weight44 = Math.Min(_weight44_003, 1.0);
        Implicit _phi44_000 = sdot(x44, y44, z44, x, y, z);
        Implicit _phi44_001 = Multiply(frequency, _phi44_000);
        double _phi44_002 = 2.0 * PI;
        double _phi44_003 = _phi44_002 * 0.457059955454899;
        Implicit _phi44_004 = Add(_phi44_001, _phi44_003);
        Implicit phi44 = Cos(_phi44_004);
        Implicit term44 = Multiply(weight44, phi44);
        Implicit sum44 = Add(sum43, term44);
        double dot45 = ssdot(x45, y45, z45, direction_x, direction_y, direction_z);
        double _unclamped45_000 = Math.Abs(dot45);
        double _unclamped45_001 = 1.0 - anisotropy;
        double _unclamped45_002 = flength(x45, y45, z45);
        double _unclamped45_003 = _unclamped45_001 * _unclamped45_002;
        double unclamped45 = _unclamped45_000 - _unclamped45_003;
        double _weight45_000 = 2.0 * cutoff;
        double _weight45_001 = unclamped45 / _weight45_000;
        double _weight45_002 = _weight45_001 + 0.5;
        double _weight45_003 = Math.Max(0.0, _weight45_002);
        double weight45 = Math.Min(_weight45_003, 1.0);
        Implicit _phi45_000 = sdot(x45, y45, z45, x, y, z);
        Implicit _phi45_001 = Multiply(frequency, _phi45_000);
        double _phi45_002 = 2.0 * PI;
        double _phi45_003 = _phi45_002 * 0.119929684209305;
        Implicit _phi45_004 = Add(_phi45_001, _phi45_003);
        Implicit phi45 = Cos(_phi45_004);
        Implicit term45 = Multiply(weight45, phi45);
        Implicit sum45 = Add(sum44, term45);
        double dot46 = ssdot(x46, y46, z46, direction_x, direction_y, direction_z);
        double _unclamped46_000 = Math.Abs(dot46);
        double _unclamped46_001 = 1.0 - anisotropy;
        double _unclamped46_002 = flength(x46, y46, z46);
        double _unclamped46_003 = _unclamped46_001 * _unclamped46_002;
        double unclamped46 = _unclamped46_000 - _unclamped46_003;
        double _weight46_000 = 2.0 * cutoff;
        double _weight46_001 = unclamped46 / _weight46_000;
        double _weight46_002 = _weight46_001 + 0.5;
        double _weight46_003 = Math.Max(0.0, _weight46_002);
        double weight46 = Math.Min(_weight46_003, 1.0);
        Implicit _phi46_000 = sdot(x46, y46, z46, x, y, z);
        Implicit _phi46_001 = Multiply(frequency, _phi46_000);
        double _phi46_002 = 2.0 * PI;
        double _phi46_003 = _phi46_002 * 0.266813771951067;
        Implicit _phi46_004 = Add(_phi46_001, _phi46_003);
        Implicit phi46 = Cos(_phi46_004);
        Implicit term46 = Multiply(weight46, phi46);
        Implicit sum46 = Add(sum45, term46);
        double dot47 = ssdot(x47, y47, z47, direction_x, direction_y, direction_z);
        double _unclamped47_000 = Math.Abs(dot47);
        double _unclamped47_001 = 1.0 - anisotropy;
        double _unclamped47_002 = flength(x47, y47, z47);
        double _unclamped47_003 = _unclamped47_001 * _unclamped47_002;
        double unclamped47 = _unclamped47_000 - _unclamped47_003;
        double _weight47_000 = 2.0 * cutoff;
        double _weight47_001 = unclamped47 / _weight47_000;
        double _weight47_002 = _weight47_001 + 0.5;
        double _weight47_003 = Math.Max(0.0, _weight47_002);
        double weight47 = Math.Min(_weight47_003, 1.0);
        Implicit _phi47_000 = sdot(x47, y47, z47, x, y, z);
        Implicit _phi47_001 = Multiply(frequency, _phi47_000);
        double _phi47_002 = 2.0 * PI;
        double _phi47_003 = _phi47_002 * 0.0532030445137037;
        Implicit _phi47_004 = Add(_phi47_001, _phi47_003);
        Implicit phi47 = Cos(_phi47_004);
        Implicit term47 = Multiply(weight47, phi47);
        Implicit sum47 = Add(sum46, term47);
        double dot48 = ssdot(x48, y48, z48, direction_x, direction_y, direction_z);
        double _unclamped48_000 = Math.Abs(dot48);
        double _unclamped48_001 = 1.0 - anisotropy;
        double _unclamped48_002 = flength(x48, y48, z48);
        double _unclamped48_003 = _unclamped48_001 * _unclamped48_002;
        double unclamped48 = _unclamped48_000 - _unclamped48_003;
        double _weight48_000 = 2.0 * cutoff;
        double _weight48_001 = unclamped48 / _weight48_000;
        double _weight48_002 = _weight48_001 + 0.5;
        double _weight48_003 = Math.Max(0.0, _weight48_002);
        double weight48 = Math.Min(_weight48_003, 1.0);
        Implicit _phi48_000 = sdot(x48, y48, z48, x, y, z);
        Implicit _phi48_001 = Multiply(frequency, _phi48_000);
        double _phi48_002 = 2.0 * PI;
        double _phi48_003 = _phi48_002 * 0.754853187279338;
        Implicit _phi48_004 = Add(_phi48_001, _phi48_003);
        Implicit phi48 = Cos(_phi48_004);
        Implicit term48 = Multiply(weight48, phi48);
        Implicit sum48 = Add(sum47, term48);
        double dot49 = ssdot(x49, y49, z49, direction_x, direction_y, direction_z);
        double _unclamped49_000 = Math.Abs(dot49);
        double _unclamped49_001 = 1.0 - anisotropy;
        double _unclamped49_002 = flength(x49, y49, z49);
        double _unclamped49_003 = _unclamped49_001 * _unclamped49_002;
        double unclamped49 = _unclamped49_000 - _unclamped49_003;
        double _weight49_000 = 2.0 * cutoff;
        double _weight49_001 = unclamped49 / _weight49_000;
        double _weight49_002 = _weight49_001 + 0.5;
        double _weight49_003 = Math.Max(0.0, _weight49_002);
        double weight49 = Math.Min(_weight49_003, 1.0);
        Implicit _phi49_000 = sdot(x49, y49, z49, x, y, z);
        Implicit _phi49_001 = Multiply(frequency, _phi49_000);
        double _phi49_002 = 2.0 * PI;
        double _phi49_003 = _phi49_002 * 0.527912470605376;
        Implicit _phi49_004 = Add(_phi49_001, _phi49_003);
        Implicit phi49 = Cos(_phi49_004);
        Implicit term49 = Multiply(weight49, phi49);
        Implicit sum49 = Add(sum48, term49);
        double dot50 = ssdot(x50, y50, z50, direction_x, direction_y, direction_z);
        double _unclamped50_000 = Math.Abs(dot50);
        double _unclamped50_001 = 1.0 - anisotropy;
        double _unclamped50_002 = flength(x50, y50, z50);
        double _unclamped50_003 = _unclamped50_001 * _unclamped50_002;
        double unclamped50 = _unclamped50_000 - _unclamped50_003;
        double _weight50_000 = 2.0 * cutoff;
        double _weight50_001 = unclamped50 / _weight50_000;
        double _weight50_002 = _weight50_001 + 0.5;
        double _weight50_003 = Math.Max(0.0, _weight50_002);
        double weight50 = Math.Min(_weight50_003, 1.0);
        Implicit _phi50_000 = sdot(x50, y50, z50, x, y, z);
        Implicit _phi50_001 = Multiply(frequency, _phi50_000);
        double _phi50_002 = 2.0 * PI;
        double _phi50_003 = _phi50_002 * 0.421421496308035;
        Implicit _phi50_004 = Add(_phi50_001, _phi50_003);
        Implicit phi50 = Cos(_phi50_004);
        Implicit term50 = Multiply(weight50, phi50);
        Implicit sum50 = Add(sum49, term50);
        double dot51 = ssdot(x51, y51, z51, direction_x, direction_y, direction_z);
        double _unclamped51_000 = Math.Abs(dot51);
        double _unclamped51_001 = 1.0 - anisotropy;
        double _unclamped51_002 = flength(x51, y51, z51);
        double _unclamped51_003 = _unclamped51_001 * _unclamped51_002;
        double unclamped51 = _unclamped51_000 - _unclamped51_003;
        double _weight51_000 = 2.0 * cutoff;
        double _weight51_001 = unclamped51 / _weight51_000;
        double _weight51_002 = _weight51_001 + 0.5;
        double _weight51_003 = Math.Max(0.0, _weight51_002);
        double weight51 = Math.Min(_weight51_003, 1.0);
        Implicit _phi51_000 = sdot(x51, y51, z51, x, y, z);
        Implicit _phi51_001 = Multiply(frequency, _phi51_000);
        double _phi51_002 = 2.0 * PI;
        double _phi51_003 = _phi51_002 * 0.634802209206464;
        Implicit _phi51_004 = Add(_phi51_001, _phi51_003);
        Implicit phi51 = Cos(_phi51_004);
        Implicit term51 = Multiply(weight51, phi51);
        Implicit sum51 = Add(sum50, term51);
        double dot52 = ssdot(x52, y52, z52, direction_x, direction_y, direction_z);
        double _unclamped52_000 = Math.Abs(dot52);
        double _unclamped52_001 = 1.0 - anisotropy;
        double _unclamped52_002 = flength(x52, y52, z52);
        double _unclamped52_003 = _unclamped52_001 * _unclamped52_002;
        double unclamped52 = _unclamped52_000 - _unclamped52_003;
        double _weight52_000 = 2.0 * cutoff;
        double _weight52_001 = unclamped52 / _weight52_000;
        double _weight52_002 = _weight52_001 + 0.5;
        double _weight52_003 = Math.Max(0.0, _weight52_002);
        double weight52 = Math.Min(_weight52_003, 1.0);
        Implicit _phi52_000 = sdot(x52, y52, z52, x, y, z);
        Implicit _phi52_001 = Multiply(frequency, _phi52_000);
        double _phi52_002 = 2.0 * PI;
        double _phi52_003 = _phi52_002 * 0.123032722873686;
        Implicit _phi52_004 = Add(_phi52_001, _phi52_003);
        Implicit phi52 = Cos(_phi52_004);
        Implicit term52 = Multiply(weight52, phi52);
        Implicit sum52 = Add(sum51, term52);
        double dot53 = ssdot(x53, y53, z53, direction_x, direction_y, direction_z);
        double _unclamped53_000 = Math.Abs(dot53);
        double _unclamped53_001 = 1.0 - anisotropy;
        double _unclamped53_002 = flength(x53, y53, z53);
        double _unclamped53_003 = _unclamped53_001 * _unclamped53_002;
        double unclamped53 = _unclamped53_000 - _unclamped53_003;
        double _weight53_000 = 2.0 * cutoff;
        double _weight53_001 = unclamped53 / _weight53_000;
        double _weight53_002 = _weight53_001 + 0.5;
        double _weight53_003 = Math.Max(0.0, _weight53_002);
        double weight53 = Math.Min(_weight53_003, 1.0);
        Implicit _phi53_000 = sdot(x53, y53, z53, x, y, z);
        Implicit _phi53_001 = Multiply(frequency, _phi53_000);
        double _phi53_002 = 2.0 * PI;
        double _phi53_003 = _phi53_002 * 0.855072620125269;
        Implicit _phi53_004 = Add(_phi53_001, _phi53_003);
        Implicit phi53 = Cos(_phi53_004);
        Implicit term53 = Multiply(weight53, phi53);
        Implicit sum53 = Add(sum52, term53);
        double dot54 = ssdot(x54, y54, z54, direction_x, direction_y, direction_z);
        double _unclamped54_000 = Math.Abs(dot54);
        double _unclamped54_001 = 1.0 - anisotropy;
        double _unclamped54_002 = flength(x54, y54, z54);
        double _unclamped54_003 = _unclamped54_001 * _unclamped54_002;
        double unclamped54 = _unclamped54_000 - _unclamped54_003;
        double _weight54_000 = 2.0 * cutoff;
        double _weight54_001 = unclamped54 / _weight54_000;
        double _weight54_002 = _weight54_001 + 0.5;
        double _weight54_003 = Math.Max(0.0, _weight54_002);
        double weight54 = Math.Min(_weight54_003, 1.0);
        Implicit _phi54_000 = sdot(x54, y54, z54, x, y, z);
        Implicit _phi54_001 = Multiply(frequency, _phi54_000);
        double _phi54_002 = 2.0 * PI;
        double _phi54_003 = _phi54_002 * 0.272521643508464;
        Implicit _phi54_004 = Add(_phi54_001, _phi54_003);
        Implicit phi54 = Cos(_phi54_004);
        Implicit term54 = Multiply(weight54, phi54);
        Implicit sum54 = Add(sum53, term54);
        double dot55 = ssdot(x55, y55, z55, direction_x, direction_y, direction_z);
        double _unclamped55_000 = Math.Abs(dot55);
        double _unclamped55_001 = 1.0 - anisotropy;
        double _unclamped55_002 = flength(x55, y55, z55);
        double _unclamped55_003 = _unclamped55_001 * _unclamped55_002;
        double unclamped55 = _unclamped55_000 - _unclamped55_003;
        double _weight55_000 = 2.0 * cutoff;
        double _weight55_001 = unclamped55 / _weight55_000;
        double _weight55_002 = _weight55_001 + 0.5;
        double _weight55_003 = Math.Max(0.0, _weight55_002);
        double weight55 = Math.Min(_weight55_003, 1.0);
        Implicit _phi55_000 = sdot(x55, y55, z55, x, y, z);
        Implicit _phi55_001 = Multiply(frequency, _phi55_000);
        double _phi55_002 = 2.0 * PI;
        double _phi55_003 = _phi55_002 * 0.215087593249877;
        Implicit _phi55_004 = Add(_phi55_001, _phi55_003);
        Implicit phi55 = Cos(_phi55_004);
        Implicit term55 = Multiply(weight55, phi55);
        Implicit sum55 = Add(sum54, term55);
        double dot56 = ssdot(x56, y56, z56, direction_x, direction_y, direction_z);
        double _unclamped56_000 = Math.Abs(dot56);
        double _unclamped56_001 = 1.0 - anisotropy;
        double _unclamped56_002 = flength(x56, y56, z56);
        double _unclamped56_003 = _unclamped56_001 * _unclamped56_002;
        double unclamped56 = _unclamped56_000 - _unclamped56_003;
        double _weight56_000 = 2.0 * cutoff;
        double _weight56_001 = unclamped56 / _weight56_000;
        double _weight56_002 = _weight56_001 + 0.5;
        double _weight56_003 = Math.Max(0.0, _weight56_002);
        double weight56 = Math.Min(_weight56_003, 1.0);
        Implicit _phi56_000 = sdot(x56, y56, z56, x, y, z);
        Implicit _phi56_001 = Multiply(frequency, _phi56_000);
        double _phi56_002 = 2.0 * PI;
        double _phi56_003 = _phi56_002 * 0.389972902487181;
        Implicit _phi56_004 = Add(_phi56_001, _phi56_003);
        Implicit phi56 = Cos(_phi56_004);
        Implicit term56 = Multiply(weight56, phi56);
        Implicit sum56 = Add(sum55, term56);
        double dot57 = ssdot(x57, y57, z57, direction_x, direction_y, direction_z);
        double _unclamped57_000 = Math.Abs(dot57);
        double _unclamped57_001 = 1.0 - anisotropy;
        double _unclamped57_002 = flength(x57, y57, z57);
        double _unclamped57_003 = _unclamped57_001 * _unclamped57_002;
        double unclamped57 = _unclamped57_000 - _unclamped57_003;
        double _weight57_000 = 2.0 * cutoff;
        double _weight57_001 = unclamped57 / _weight57_000;
        double _weight57_002 = _weight57_001 + 0.5;
        double _weight57_003 = Math.Max(0.0, _weight57_002);
        double weight57 = Math.Min(_weight57_003, 1.0);
        Implicit _phi57_000 = sdot(x57, y57, z57, x, y, z);
        Implicit _phi57_001 = Multiply(frequency, _phi57_000);
        double _phi57_002 = 2.0 * PI;
        double _phi57_003 = _phi57_002 * 0.378236955315324;
        Implicit _phi57_004 = Add(_phi57_001, _phi57_003);
        Implicit phi57 = Cos(_phi57_004);
        Implicit term57 = Multiply(weight57, phi57);
        Implicit sum57 = Add(sum56, term57);
        double dot58 = ssdot(x58, y58, z58, direction_x, direction_y, direction_z);
        double _unclamped58_000 = Math.Abs(dot58);
        double _unclamped58_001 = 1.0 - anisotropy;
        double _unclamped58_002 = flength(x58, y58, z58);
        double _unclamped58_003 = _unclamped58_001 * _unclamped58_002;
        double unclamped58 = _unclamped58_000 - _unclamped58_003;
        double _weight58_000 = 2.0 * cutoff;
        double _weight58_001 = unclamped58 / _weight58_000;
        double _weight58_002 = _weight58_001 + 0.5;
        double _weight58_003 = Math.Max(0.0, _weight58_002);
        double weight58 = Math.Min(_weight58_003, 1.0);
        Implicit _phi58_000 = sdot(x58, y58, z58, x, y, z);
        Implicit _phi58_001 = Multiply(frequency, _phi58_000);
        double _phi58_002 = 2.0 * PI;
        double _phi58_003 = _phi58_002 * 0.765537410222124;
        Implicit _phi58_004 = Add(_phi58_001, _phi58_003);
        Implicit phi58 = Cos(_phi58_004);
        Implicit term58 = Multiply(weight58, phi58);
        Implicit sum58 = Add(sum57, term58);
        double dot59 = ssdot(x59, y59, z59, direction_x, direction_y, direction_z);
        double _unclamped59_000 = Math.Abs(dot59);
        double _unclamped59_001 = 1.0 - anisotropy;
        double _unclamped59_002 = flength(x59, y59, z59);
        double _unclamped59_003 = _unclamped59_001 * _unclamped59_002;
        double unclamped59 = _unclamped59_000 - _unclamped59_003;
        double _weight59_000 = 2.0 * cutoff;
        double _weight59_001 = unclamped59 / _weight59_000;
        double _weight59_002 = _weight59_001 + 0.5;
        double _weight59_003 = Math.Max(0.0, _weight59_002);
        double weight59 = Math.Min(_weight59_003, 1.0);
        Implicit _phi59_000 = sdot(x59, y59, z59, x, y, z);
        Implicit _phi59_001 = Multiply(frequency, _phi59_000);
        double _phi59_002 = 2.0 * PI;
        double _phi59_003 = _phi59_002 * 0.259067525398686;
        Implicit _phi59_004 = Add(_phi59_001, _phi59_003);
        Implicit phi59 = Cos(_phi59_004);
        Implicit term59 = Multiply(weight59, phi59);
        Implicit sum59 = Add(sum58, term59);
        double dot60 = ssdot(x60, y60, z60, direction_x, direction_y, direction_z);
        double _unclamped60_000 = Math.Abs(dot60);
        double _unclamped60_001 = 1.0 - anisotropy;
        double _unclamped60_002 = flength(x60, y60, z60);
        double _unclamped60_003 = _unclamped60_001 * _unclamped60_002;
        double unclamped60 = _unclamped60_000 - _unclamped60_003;
        double _weight60_000 = 2.0 * cutoff;
        double _weight60_001 = unclamped60 / _weight60_000;
        double _weight60_002 = _weight60_001 + 0.5;
        double _weight60_003 = Math.Max(0.0, _weight60_002);
        double weight60 = Math.Min(_weight60_003, 1.0);
        Implicit _phi60_000 = sdot(x60, y60, z60, x, y, z);
        Implicit _phi60_001 = Multiply(frequency, _phi60_000);
        double _phi60_002 = 2.0 * PI;
        double _phi60_003 = _phi60_002 * 0.0623158274540946;
        Implicit _phi60_004 = Add(_phi60_001, _phi60_003);
        Implicit phi60 = Cos(_phi60_004);
        Implicit term60 = Multiply(weight60, phi60);
        Implicit sum60 = Add(sum59, term60);
        double dot61 = ssdot(x61, y61, z61, direction_x, direction_y, direction_z);
        double _unclamped61_000 = Math.Abs(dot61);
        double _unclamped61_001 = 1.0 - anisotropy;
        double _unclamped61_002 = flength(x61, y61, z61);
        double _unclamped61_003 = _unclamped61_001 * _unclamped61_002;
        double unclamped61 = _unclamped61_000 - _unclamped61_003;
        double _weight61_000 = 2.0 * cutoff;
        double _weight61_001 = unclamped61 / _weight61_000;
        double _weight61_002 = _weight61_001 + 0.5;
        double _weight61_003 = Math.Max(0.0, _weight61_002);
        double weight61 = Math.Min(_weight61_003, 1.0);
        Implicit _phi61_000 = sdot(x61, y61, z61, x, y, z);
        Implicit _phi61_001 = Multiply(frequency, _phi61_000);
        double _phi61_002 = 2.0 * PI;
        double _phi61_003 = _phi61_002 * 0.760852958071643;
        Implicit _phi61_004 = Add(_phi61_001, _phi61_003);
        Implicit phi61 = Cos(_phi61_004);
        Implicit term61 = Multiply(weight61, phi61);
        Implicit sum61 = Add(sum60, term61);
        double dot62 = ssdot(x62, y62, z62, direction_x, direction_y, direction_z);
        double _unclamped62_000 = Math.Abs(dot62);
        double _unclamped62_001 = 1.0 - anisotropy;
        double _unclamped62_002 = flength(x62, y62, z62);
        double _unclamped62_003 = _unclamped62_001 * _unclamped62_002;
        double unclamped62 = _unclamped62_000 - _unclamped62_003;
        double _weight62_000 = 2.0 * cutoff;
        double _weight62_001 = unclamped62 / _weight62_000;
        double _weight62_002 = _weight62_001 + 0.5;
        double _weight62_003 = Math.Max(0.0, _weight62_002);
        double weight62 = Math.Min(_weight62_003, 1.0);
        Implicit _phi62_000 = sdot(x62, y62, z62, x, y, z);
        Implicit _phi62_001 = Multiply(frequency, _phi62_000);
        double _phi62_002 = 2.0 * PI;
        double _phi62_003 = _phi62_002 * 0.476892257569182;
        Implicit _phi62_004 = Add(_phi62_001, _phi62_003);
        Implicit phi62 = Cos(_phi62_004);
        Implicit term62 = Multiply(weight62, phi62);
        Implicit sum62 = Add(sum61, term62);
        double dot63 = ssdot(x63, y63, z63, direction_x, direction_y, direction_z);
        double _unclamped63_000 = Math.Abs(dot63);
        double _unclamped63_001 = 1.0 - anisotropy;
        double _unclamped63_002 = flength(x63, y63, z63);
        double _unclamped63_003 = _unclamped63_001 * _unclamped63_002;
        double unclamped63 = _unclamped63_000 - _unclamped63_003;
        double _weight63_000 = 2.0 * cutoff;
        double _weight63_001 = unclamped63 / _weight63_000;
        double _weight63_002 = _weight63_001 + 0.5;
        double _weight63_003 = Math.Max(0.0, _weight63_002);
        double weight63 = Math.Min(_weight63_003, 1.0);
        Implicit _phi63_000 = sdot(x63, y63, z63, x, y, z);
        Implicit _phi63_001 = Multiply(frequency, _phi63_000);
        double _phi63_002 = 2.0 * PI;
        double _phi63_003 = _phi63_002 * 0.994123379352296;
        Implicit _phi63_004 = Add(_phi63_001, _phi63_003);
        Implicit phi63 = Cos(_phi63_004);
        Implicit term63 = Multiply(weight63, phi63);
        Implicit sum63 = Add(sum62, term63);
        double dot64 = ssdot(x64, y64, z64, direction_x, direction_y, direction_z);
        double _unclamped64_000 = Math.Abs(dot64);
        double _unclamped64_001 = 1.0 - anisotropy;
        double _unclamped64_002 = flength(x64, y64, z64);
        double _unclamped64_003 = _unclamped64_001 * _unclamped64_002;
        double unclamped64 = _unclamped64_000 - _unclamped64_003;
        double _weight64_000 = 2.0 * cutoff;
        double _weight64_001 = unclamped64 / _weight64_000;
        double _weight64_002 = _weight64_001 + 0.5;
        double _weight64_003 = Math.Max(0.0, _weight64_002);
        double weight64 = Math.Min(_weight64_003, 1.0);
        Implicit _phi64_000 = sdot(x64, y64, z64, x, y, z);
        Implicit _phi64_001 = Multiply(frequency, _phi64_000);
        double _phi64_002 = 2.0 * PI;
        double _phi64_003 = _phi64_002 * 0.751770406416864;
        Implicit _phi64_004 = Add(_phi64_001, _phi64_003);
        Implicit phi64 = Cos(_phi64_004);
        Implicit term64 = Multiply(weight64, phi64);
        Implicit sum64 = Add(sum63, term64);
        Implicit _lattice_000 = Multiply(sum64, size_x);
        double range = supremum - infimum;
        double _lattice_001 = 2.0 * range;
        Implicit _lattice_002 = Divide(_lattice_000, _lattice_001);
        Implicit lattice = Subtract(_lattice_002, bias);
        return lattice;
    }

    public static Implicit IndexedLattice(Vector3d p)
    {
        Implicit lattice = baseLattice(p);
        Implicit solid = lattice;
        if (VariantIndex == 0) return solid;
        Implicit inverse = Multiply(-1.0, lattice);
        if (VariantIndex == 1) return inverse;
        Implicit _thin_000 = Abs(lattice);
        double _thin_001 = thickness * 0.5;
        Implicit thin = Subtract(_thin_000, _thin_001);
        if (VariantIndex == 2) return thin;
        Implicit twin = Multiply(-1.0, thin);
        if (VariantIndex == 3) return twin;
        Implicit unknown = Sphere(p, new Vector3d(0.0), 0.5);
        return unknown;
    }

    public static Implicit ScaledLattice(Vector3d scaledP)
    {
        Vector3d p = (scaledP - center) * 10.0;
        Implicit result = IndexedLattice(p);
        Implicit indexed = Divide(result, 10.0);
        return indexed;
    }

}